shade <- rbind(c(3, 0.5), subset(df, t>=2.35), c(df[nrow(df), "t"], 0.5))
shade2 <- rbind(c(0, 0.5), subset(df, t<=0.35), c(df[nrow(df), "t"], 0.5))
ggplot(df, aes(x = t, y = y)) +
geom_polygon(data = shade, aes(t, y), fill = "yellow") +
geom_polygon(data = shade2, aes(t, y), fill = "yellow") +
ylab("-log(t) + t - 1") + ylim(c(0, 3.5)) +
geom_hline(yintercept = 0.5, colour = "red") +
geom_smooth()
ggplot(df, aes(x = t, y = y)) +
geom_polygon(data = shade, aes(t, y), fill = "yellow") +
geom_polygon(data = shade2, aes(t, y), fill = "yellow") +
ylab("-log(t) + t - 1") + ylim(c(0, 3.5)) +
geom_hline(yintercept = 0.5, colour = "red") +
geom_point()
library(ggplot2)
theme_set(theme_bw())
t <- seq(0, 5, 0.01)
f <- function(t) {
res = -log(t) + t -1
return(res)
}
df <- data.frame("t" = t, "y" = f(t))
shade <- rbind(c(3, 0.5), subset(df, t>=2.35), c(df[nrow(df), "t"], 0.5))
shade2 <- rbind(c(0, 0.5), subset(df, t<=0.35), c(df[nrow(df), "t"], 0.5))
ggplot(df, aes(x = t, y = y)) +
geom_polygon(data = shade, aes(t, y), fill = "yellow") +
geom_polygon(data = shade2, aes(t, y), fill = "yellow") +
ylab("-log(t) + t - 1") + ylim(c(0, 3.5)) +
geom_hline(yintercept = 0.5, colour = "red") +
geom_point()
library(ggplot2)
theme_set(theme_bw())
t <- seq(0, 5, 0.05)
f <- function(t) {
res = -log(t) + t -1
return(res)
}
df <- data.frame("t" = t, "y" = f(t))
shade <- rbind(c(3, 0.5), subset(df, t>=2.35), c(df[nrow(df), "t"], 0.5))
shade2 <- rbind(c(0, 0.5), subset(df, t<=0.35), c(df[nrow(df), "t"], 0.5))
ggplot(df, aes(x = t, y = y)) +
geom_polygon(data = shade, aes(t, y), fill = "yellow") +
geom_polygon(data = shade2, aes(t, y), fill = "yellow") +
ylab("-log(t) + t - 1") + ylim(c(0, 3.5)) +
geom_hline(yintercept = 0.5, colour = "red") +
geom_point()
x <- c(3.03, 5.60, 9.30, 12.51, 15.21, 16.84)
n <- length(x)
y <- c(3.19, 4.47, 4.53, 4.69, 6.79, 12.75)
m <- length(y)
Sp <- sqrt(((n-1)*var(x) + (m-1)*var(y))/(n+m-2))
ese <- Sp*sqrt(1/n + 1/m)
tscore <- (mean(x) - mean(y) - 0)/ese
pval <- 2*pt(tscore, n+m-2, lower.tail = F)
cat("p-val = ", pval)
ese <- sqrt(var(x)/n + var(y)/m)
dof <- (var(x)/n + var(y)/m)^2 / ((var(x)/n)^2/(n-1) + (var(y)/m)^2/(m-1))
tscore <- (mean(x) - mean(y) - 0)/ese
pval <- 2*pt(tscore, dof, lower.tail = F)
cat("p-val = ", pval)
pval <- 2*pf(var(y)/var(x), df1 = n-1, df2 = m-1)
cat("p-val = ", pval)
concat(x, y)
c(x, y)
# concat the data together
data <- c(x, y)
# compute rank of the data
rank <- rank(data)
# compute R stat of x values
R <- sum(rank[1:n])
Rprime <- n*(n+m+1) - R
Rstar <- min(R, Rprime)
cat("R* = ", Rstar)
data <- c(1.7, 6.1, 12.5, 25.1, 42.1,
13.6, 25.2, 46.2,
13.4, 29.7, 46.9)
labels <- c(rep("I", 5), rep("II", 3), rep("III", 3))
anova(lm(data~label))
data <- c(1.7, 6.1, 12.5, 25.1, 42.1,
13.6, 25.2, 46.2,
13.4, 29.7, 46.9)
labels <- c(rep("I", 5), rep("II", 3), rep("III", 3))
anova(lm(data~labels))
# implement a function to conduct these tests
homogen_indep <- function(data) {
# define a new dataframe with the same dimensions as data, all info to be replaced
holder <- data
# chistat will be added to in each iteration of the loop, starts at 0
chistat <- 0
# compute sums
n <- sum(data)
row_sums <- rowSums(data)
col_sums <- colSums(data)
# compute Exp statistic for every cell in holder
for (i in 1:dim(data)[1]) {
for (j in 1:dim(data)[2]) {
holder[i, j] <- row_sums[i] * col_sums[j] / n
chistat <- chistat + (data[i, j] - holder[i, j])^2/holder[i,j]
}
}
# compute degrees of freedom
dof <- (dim(data)[1] - 1) * (dim(data)[2] - 1)
# compute p-value
pval <- pchisq(chistat, dof, lower.tail = F)
# output results
cat("test statistic = ", chistat, "\n")
cat("degrees of freedom = ", dof, "\n")
cat("p-val = ", pval, "\n")
}
# implement a function to calculate this stat
mcnemar <- function(data) {
chistat <- (data[1, 2] - data[2, 1])^2 / (data[1, 2] + data[2, 1])
dof = 1
pval = pchisq(chistat, dof, lower.tail = F)
# output results
cat("test statistic = ", chistat, "\n")
cat("degrees of freedom = ", dof, "\n")
cat("p-val = ", pval, "\n")
}
data <- matrix(c(78, 56, 43, 53, 36, 42, 29, 47, 29, 29, 32, 30, 22, 23, 7), ncol = 2, nrow = 8)
data <- matrix(c(78, 56, 43, 53, 43, 36, 42, 29,
47, 29, 29, 32, 30, 22, 23, 7), ncol = 2, nrow = 8)
homogen_indep(data)
data <- matrix(c(8, 15, 13,
14, 19, 15,
15, 4, 7,
3, 1, 4), byrow = T, nrow = 4))
data <- matrix(c(8, 15, 13,
14, 19, 15,
15, 4, 7,
3, 1, 4), byrow = T, nrow = 4)
homogen_indep(data)
data <- matrix(c(152-52, 52,
85-52, 52,
67-35, 35,
85-37, 37), byrow = T, nrow = 4)
homogen_indep(data)
data <- matrix(c(55, 141,
33, 145,
70, 139,
49, 161), byrow = T, nrow = 4)
homogen_indep(data)
data <- matrix(c(51, 38,
14, 16,
38, 46), byrow = T, nrow = 3)
homogen_indep(data)
# observed # of males and females
obs <- colSums(data)
# compute expected numbers of females and males
exp <- c(100/(205.37) * sum(data), 105.37/205.37 * sum(data))
# compute chi statistic
chistat <- sum((obs-exp)^2/exp)
dof <- 1
pval <- pchisq(chistat, dof, lower.tail = F)
# output results
cat("test statistic = ", chistat, "\n")
cat("degrees of freedom = ", dof, "\n")
cat("p-val = ", pval, "\n")
data <- matrix(c(101, 83,
11, 29,
15, 15,
37, 22,
28, 43,
10, 4), nrow = 6, byrow = T)
homogen_indep(data)
data <- matrix(c(4, 9,
50, 1165), byrow = T, ncol = 2)
mcnemar(data)
data <- matrix(c(128, 7,
19, 7), nrow = 2, byrow = T)
mcnemar(data)
sexdata <- matrix(c(78, 94,
50, 89), byrow = T, nrow = 2)
smokerdata <- matrix(c(13, 37,
115, 146), byrow = T, nrow = 2)
sexdata <- matrix(c(78, 94,
50, 89), byrow = T, nrow = 2)
smokerdata <- matrix(c(13, 37,
115, 146), byrow = T, nrow = 2)
## (i)
```{r}
# proportion of male doctor's patients advised to quit:
sexdata[1,1]/sexdata[1,2]
# proportion of female doctor's patients advised to quit:
sexdata[2,1]/sexdata[2,2]
mcnemar(sexdata)
mcnemar(smokerdata)
# proportion of male doctor's patients advised to quit:
sexdata[1,1]/rowSums(sexdata)[1]
# proportion of female doctor's patients advised to quit:
sexdata[2,1]/rowSums(sexdata)[2]
homogen_indep(sexdata)
homogen_indep(smokerdata)
or <- ((sexdata[1,1]/rowSums(sexdata)[1]) / (1-sexdata[1,1]/rowSums(sexdata)[1])) /
((sexdata[2,1]/rowSums(sexdata)[2]) / (1-sexdata[2,1]/rowSums(sexdata)[2]))
cat("odds ratio (sex) = ", or, "\n")
or <- ((smokerdata[1,1]/rowSums(smokerdata)[1]) / (1-smokerdata[1,1]/rowSums(smokerdata)[1])) /
((smokerdata[2,1]/rowSums(smokerdata)[2]) / (1-smokerdata[2,1]/rowSums(smokerdata)[2]))
cat("odds ratio (smoker) = ", or, "\n")
library(corrplot)
citation(corrplot)
citation("corrplot")
?pchisq
# implement a function to conduct these tests
homogen_indep <- function(data) {
# define a new dataframe with the same dimensions as data, all info to be replaced
holder <- data
# chistat will be added to in each iteration of the loop, starts at 0
chistat <- 0
# compute sums
n <- sum(data)
row_sums <- rowSums(data)
col_sums <- colSums(data)
# compute Exp statistic for every cell in holder
for (i in 1:dim(data)[1]) {
for (j in 1:dim(data)[2]) {
holder[i, j] <- row_sums[i] * col_sums[j] / n
chistat <- chistat + (data[i, j] - holder[i, j])^2/holder[i,j]
}
}
# compute degrees of freedom
dof <- (dim(data)[1] - 1) * (dim(data)[2] - 1)
# compute p-value
pval <- pchisq(chistat, dof, lower.tail = F)
# output results
cat("test statistic = ", chistat, "\n")
cat("degrees of freedom = ", dof, "\n")
cat("p-val = ", pval, "\n")
}
data = matrix(c(20, 10, 15, 25, 25, 25, 60, 60), nrows = 4, byrow = T)
data = matrix(c(20, 10, 15, 25, 25, 25, 60, 60), nrow = 4, byrow = T)
datat
data
homogen_indep(data)
mcnemar <- function(data) {
chistat <- (data[1, 2] - data[2, 1])^2 / (data[1, 2] + data[2, 1])
dof = 1
pval = pchisq(chistat, dof, lower.tail = F)
# output results
cat("test statistic = ", chistat, "\n")
cat("degrees of freedom = ", dof, "\n")
cat("p-val = ", pval, "\n")
}
data = matrix(c(40, 10, 35, 15), nrow = 2, byrow = T)
mcnemar(data)
pchisq(9.65, 6-1, lower.tail = F)
pnorm(0.05)
pnorm(0.03)
qnorm(0.03)
qnorm(0.05)
-1.64 - (42.3-42)/0.25
pnorm(-2.84)
pnorm(2.84)
1.64 - (42.3-42)/0.25
pnorm(0.44)
?pf
pf(1.146, 2, 9, lower.tail = F)
(log(3.5)-4.5)/(log(2)-3)
(log(3.5)-4.5)/(log(2)-3)*2
library(data.table)
R.version()
version()
clin = fread("~/Google Drive/UCLA Fall 2021/bioinfo226/microbiomeProjectBioinfo226_JohnMaddieNiko/clinical_tests.txt")
View(clin)
visit = fread("~/Google Drive/UCLA Fall 2021/bioinfo226/microbiomeProjectBioinfo226_JohnMaddieNiko/data/visits.txt")
View(visit)
visit = visit[SubStudy == HMP]
visit = visit[SubStudy == 'HMP]
visit = visit[SubStudy == 'HMP']
View(visit)
table(visit$Event)
df = data.frame("Weather" = as.factor(c('S', 'S', 'C', 'C', 'R', 'R', 'S')),
"Temp" = as.factor(c('H', 'M', 'H', 'M', 'H', 'H', 'L')),
"Wind" = as.factor(c('L', 'M', 'M', 'H', 'L', 'M', 'H')),
"Run" = c(0, 1, 1, 1, 0, 0, 0))
df
?log
# define entropy function for a single vector
entropy <- function(vec) {
lev = unique(vec)
sum = 0
for (l in lev) {
p = sum(vec == l) / length(vec)
sum = sum - p * log2(p)
}
}
entropy(df$Run)
# define entropy function for a single vector
entropy <- function(vec) {
lev = unique(vec)
sum = 0
for (l in lev) {
p = sum(vec == l) / length(vec)
sum = sum - p * log2(p)
}
return(sum)
}
entropy(df$Run)
entropy(df$Weather)
# declare dataframe
df = data.frame("Weather" = c('S', 'S', 'C', 'C', 'R', 'R', 'S'),
"Temp" = c('H', 'M', 'H', 'M', 'H', 'H', 'L'),
"Wind" = c('L', 'M', 'M', 'H', 'L', 'M', 'H'),
"Run" = c(0, 1, 1, 1, 0, 0, 0))
entropy(df$Weather)
debugSource('~/Google Drive/UCLA Fall 2021/cs148/hw3_prob1.R', echo=TRUE)
df2 = data.frame("Outlook" = c('R', 'R', 'O', 'S', 'S', 'S', 'O', 'R', 'R', 'S', 'R' , 'O', 'O', 'S'),
"Golf" = c(0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0))
df2
entropy(df2$Golf)
entropy(df2$Golf)
# declare dataframe
df = data.frame("Weather" = c('S', 'S', 'C', 'C', 'R', 'R', 'S'),
"Temp" = c('H', 'M', 'H', 'M', 'H', 'H', 'L'),
"Wind" = c('L', 'M', 'M', 'H', 'L', 'M', 'H'),
"Run" = c(0, 1, 1, 1, 0, 0, 0))
df
df2 = data.frame("Outlook" = c('R', 'R', 'O', 'S', 'S', 'S', 'O', 'R', 'R', 'S', 'R' , 'O', 'O', 'S'),
"Golf" = c(0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0))
df2
# define entropy function for a single vector
entropy <- function(vec) {
lev = unique(vec)
sum = 0
for (l in lev) {
p = sum(vec == l) / length(vec)
sum = sum - p * log2(p)
}
return(sum)
}
# define cross-entropy
xentropy <- function(vec1, vec2) {
lev = unique(vec1)
sum = 0
for (l in lev) {
p_l = sum(vec1 == l) / length(vec1)
vec2sub = vec2[which(lev == l)]
sum = sum + p_l * entropy(vec2sub)
}
}
# define information gain
infogain <- function(target, pred) {
return(entropy(target) - xentropy(pred, target))
}
source('~/Google Drive/UCLA Fall 2021/cs148/hw3_prob1.R', echo=TRUE)
xentropy(df2$Golf, df2$Outlook)
# define cross-entropy
xentropy <- function(vec1, vec2) {
lev = unique(vec1)
sum = 0
for (l in lev) {
p_l = sum(vec1 == l) / length(vec1)
vec2sub = vec2[which(lev == l)]
sum = sum + p_l * entropy(vec2sub)
}
return(sum)
}
xentropy(df2$Golf, df2$Outlook)
# define cross-entropy
xentropy <- function(vec1, vec2) {
lev = unique(vec2)
sum = 0
for (l in lev) {
p_l = sum(vec2 == l) / length(vec2)
vec1sub = vec1[which(vec2 == l)]
sum = sum + p_l * entropy(vec1sub)
}
return(sum)
}
xentropy(df2$Golf, df2$Outlook)
infogain(df2$Golf, df2$Outlook)
# define information gain
infogain <- function(target, pred) {
return(entropy(target) - xentropy(target, pred))
}
infogain(df2$Golf, df2$Outlook)
# calculate information gain for each feature
apply(df[c("Weather", "Temp", "Wind")], 2, function(X) infogain(df$Run, X))
source("~/src/microbiome-cs226/scripts/model_comparison.R", echo=TRUE)
# compare performance of different regression methods for LDLHDL
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
# for principal components regression:
#install.packages("pls")
library(pls)
setwd("~/src/microbiome-cs226/data/")
ab = read.table("baseline_genusAbundance.txt")
ab_pheno = read.table("baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ' ')
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),  ab_pheno_all[,c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")])
ab_pheno_all = read.table("allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ' ')
ab_pheno_all[,c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")]
View(ab_pheno_all)
ab_pheno_all = read.table("allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),  ab_pheno_all[,c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")])
source("~/src/microbiome-cs226/scripts/model_comparison.R", echo=TRUE)
library(glmnet)
source("~/src/microbiome-cs226/scripts/model_comparison.R", echo=TRUE)
install.packages('glmnet')
library(glmnet)
source("~/src/microbiome-cs226/scripts/model_comparison.R", echo=TRUE)
# plot results in a barplot
msevec = c(mse.null, mse.full, mse0, mse10, mse5, mse.pcr, mse.bc)
msevec
barplotdf = data.frame("Model" = modelnames, "MSE" = msevec)
# plot results in a barplot
msevec = c(mse.null, mse.full, mse0, mse10, mse5, mse.pcr, mse.bc)
modelnames = c("Null", "Full", "Ridge", "LASSO", "ElasticNet (alpha=0.5)",
"PCR Regression", "Dysbiosis score regression")
barplotdf = data.frame("Model" = modelnames, "MSE" = msevec)
View(barplotdf)
barplotdf = barplotdf[order(barplotdf$MSE),]
barplotdf = barplotdf[order(barplotdf$MSE, ascending = F),]
barplotdf = barplotdf[order(barplotdf$MSE, decreasing = T),]
barplot_comp = ggplot(barplotdf, aes(x = "Model", y = "MSE")) + geom_barplot()
barplot_comp = ggplot(barplotdf, aes(x = "Model", y = "MSE")) + geom_bar()
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = "Model", y = "MSE")) + geom_bar(stat = 'identity')
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = Model, y = MSE)) + geom_bar(stat = 'identity')
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = Model, y = MSE)) + geom_bar()
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = Model, y = MSE)) +
geom_bar(stat = 'identity')
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = Model, y = MSE)) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = barplotdf$Model)
barplot_comp
barplot_comp = ggplot(barplotdf, aes(x = Model, y = MSE)) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = barplotdf$Model) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot_comp
barplot_comp = ggplot(barplotdf, aes(y = Model, x = MSE)) +
geom_bar(stat = 'identity') +
scale_x_discrete(limits = barplotdf$Model) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot_comp
barplot_comp = ggplot(barplotdf, aes(y = Model, x = MSE)) +
geom_bar(stat = 'identity') +
scale_y_discrete(limits = barplotdf$Model) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
barplot_comp
barplot_comp = ggplot(barplotdf, aes(y = Model, x = MSE)) +
geom_bar(stat = 'identity') +
scale_y_discrete(limits = barplotdf$Model)
barplot_comp
?ggsave
ggsave("../figs/model_comparison_barplot.png", barplot_comp, dpi = 200)
ggsave("../fig/model_comparison_barplot.png", barplot_comp, dpi = 200)
# compare performance of different regression methods for LDLHDL
library(ggplot2)
library(ggpubr)
library(dplyr)
library(xtable)
library(tidyverse)
library(glmnet)
library(knitr)
setwd("~/src/microbiome-cs226/data/")
ab = read.table("baseline_genusAbundance.txt")
setwd("~/src/microbiome-cs226/data/")
ab_pheno_all = read.table("allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
ab = read.table("baseline_genusAbundance.txt")
# compare performance of different regression methods for LDLHDL
library(ggplot2)
library(ggpubr)
library(dplyr)
library(xtable)
library(tidyverse)
library(glmnet)
library(knitr)
setwd("~/src/microbiome-cs226/data/")
ab = read.table("baseline_genusAbundance.txt")
ab_pheno = read.table("baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),  ab_pheno_all[,c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")])
ab_pheno_all = na.omit(ab_pheno_all)
pheno_all = ab_pheno_all[c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")]
ab_all = select(ab_pheno_all, starts_with("genus"))
rownames(ab_all) = ab_pheno_all$SampleID
data <- cbind(ab_pheno_all[,c("LDLHDL","CollectionDate")], ab_pheno_all %>% select(starts_with("genus")))
data <- as.matrix(data)
m1 <- lm(LDLHDL ~ genus_Anaerotruncus +
genus_Anaerovorax + genus_Blautia +
genus_Butyricicoccus + genus_Clostridium.IV +
genus_Clostridium.XVIII + genus_Holdemania +
genus_Oscillibacter + genus_Parabacteroides +
genus_Phascolarctobacterium + genus_Prevotella +
genus_unclassified_Clostridiales_Incertae.Sedis.XIII +
genus_unclassified_Lachnospiraceae +
genus_unclassified_Porphyromonadaceae, data = as.data.frame(data))
create_table = function(table_)
{
p_table = data.frame(Variables=NA, Values=NA)
for(i in 1:dim(table_)[1])
{
est_error = table_[i,c(1,4)] # Im assuming that you know that 2 first columns are the values that you want
name = c(rownames(table_)[i], '') # The final table rownames
name_values = cbind(Variables=name, Values=est_error)
p_table = rbind(p_table, name_values)
}
rownames(p_table) = 1:dim(p_table)[1]
return(na.omit(p_table))
}
table_ = summary(m1)$coefficients
kable((summary(m1)$coefficients)[,c(1,4)] %>% round(.,3))
