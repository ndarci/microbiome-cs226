return(entropy(target) - xentropy(pred, target))
}
source('~/Google Drive/UCLA Fall 2021/cs148/hw3_prob1.R', echo=TRUE)
xentropy(df2$Golf, df2$Outlook)
# define cross-entropy
xentropy <- function(vec1, vec2) {
lev = unique(vec1)
sum = 0
for (l in lev) {
p_l = sum(vec1 == l) / length(vec1)
vec2sub = vec2[which(lev == l)]
sum = sum + p_l * entropy(vec2sub)
}
return(sum)
}
xentropy(df2$Golf, df2$Outlook)
# define cross-entropy
xentropy <- function(vec1, vec2) {
lev = unique(vec2)
sum = 0
for (l in lev) {
p_l = sum(vec2 == l) / length(vec2)
vec1sub = vec1[which(vec2 == l)]
sum = sum + p_l * entropy(vec1sub)
}
return(sum)
}
xentropy(df2$Golf, df2$Outlook)
infogain(df2$Golf, df2$Outlook)
# define information gain
infogain <- function(target, pred) {
return(entropy(target) - xentropy(target, pred))
}
infogain(df2$Golf, df2$Outlook)
# calculate information gain for each feature
apply(df[c("Weather", "Temp", "Wind")], 2, function(X) infogain(df$Run, X))
?prcomp
# compute PCs to correct for in regression
pca_all = prcomp(ab_all, center = T, scale. = T)
source("~/src/microbiome-cs226/scripts/dysbiosis_analysis.R", echo=TRUE)
source("~/src/microbiome-cs226/scripts/dysbiosis_analysis.R", echo=TRUE)
library(tidyverse)
install.packages("tidyverse")
?mapply
outer(rownames(ab_all), rownames(ab_all), braycurtis)
split(ab_all, seq(nrow(ab_all)))
rowlist = split(ab_all, seq(nrow(ab_all)))
outer(rowlist, rowlist, braycurtis)
rowlist[1]
braycurtis(rowlist[1], rowlist[2])
braycurtis(rowlist[[1]], rowlist[[2]])
outer(rowlist[[]], rowlist[[]], braycurtis)
outer(rowlist, rowlist, braycurtis)
head(pheno)
x = c(1, 2, 3)
3 %in% x
3 %notin% x
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
setwd("~/src/microbiome-cs226/scripts/")
# import data
ab = read.table("../data/baseline_genusAbundance.txt")
ab_pheno = read.table("../data/baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),
ab_pheno_all[c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")])
ab_pheno_all = na.omit(ab_pheno_all)
pheno_all = ab_pheno_all[c("SampleID", "SubjectID", "CollectionDate", "LDLHDL")]
ab_all = select(ab_pheno_all, starts_with("genus"))
rownames(ab_all) = ab_pheno_all$SampleID
# function to calculate bray-curtis dissimilarity between two samples (assumes they are counted as proportions)
braycurtis <- function(si, sj) {
# sum lesser proportions of each genus
top = sum(abs(si - sj))
bottom = sum(si + sj)
return(top/bottom)
}
# function to coerce the right rows into bray-curtis and take median result
braycurtis_wrap <- function(abund, sample, healthy, pheno) {
samesubject = pheno[pheno$SampleID == sample, "SubjectID"]
res = sapply(healthy[!(healthy %in% samesubject)], function(h)
braycurtis(abund[h,], abund[sample,]))
return(median(res))
}
# function to get dysbiosis scores given an abundance table and response variable
# target must be oriented so lower values are healthier
dysbiosisAnalysis <- function(abund, pheno, target) {
# scale abundances to proportions
abund_scale = t(apply(abund, 1, function(row) row / sum(row)))
# rowSums(abund_scale) # verify this worked
# define "healthy" samples, from people with low cholesterol
healthythresh = 0.1
healthy = rownames(abund)[target < quantile(target, healthythresh)]
unhealthy = setdiff(rownames(abund), healthy)
# calculate median bray-curtis dissimilarity from healthy for each sample
# exclude samples from the same subject
# medianbc = sapply(rownames(abund), function(samp)
#   median(sapply(healthy, function(h) braycurtis(abund[samp,], abund[h,])))
# )
medianbc = sapply(rownames(abund), function(sample)
braycurtis_wrap(abund, sample, healthy, pheno)
)
# find dysbiotic samples
dysthresh = 0.9
dys = pheno[medianbc > quantile(medianbc, dysthresh), "SampleID"]
# merge this info back onto the phenotype data
pheno = cbind(pheno, medianbc)
pheno$healthy = pheno$SampleID %in% healthy
pheno$dysbiotic = pheno$SampleID %in% dys
return(list(medianbc = medianbc, pheno = pheno))
}
dysbio_all = dysbiosisAnalysis(ab_all, pheno_all, ab_pheno_all$LDLHDL)
medianbc = dysbio_all$medianbc
pheno = dysbio_all$pheno
# compute PCs to correct for in regression
pca_all = prcomp(ab_all, center = T, scale. = T)
head(pca_all$x)
head(pheno)
library(dplyr)
# import data
ct <- read.delim("../data/clinical_tests.txt", header=T, stringsAsFactors=T)
# View(ct)
gut16s <- read.delim("../data/gut_16s_abundance.txt", header=T, stringsAsFactors=T)
# View(gut16s)
subjects <- read.delim("../data/subjects.txt", header=T, stringsAsFactors=T)
# View(subjects)
visits <- read.delim("../data/visits.txt", header=T, stringsAsFactors=T)
# merge abundance and visit data
colnames(visits)[1] <- "SampleID"
ab_visit <- left_join(gut16s,visits,by="SampleID")
names(ab_visit)
# remove event notes and missing collection date
ab_visit_clean <- ab_visit[,c(1:104)]
ab_visit_clean <- ab_visit_clean[!is.na(ab_visit_clean$CollectionDate),]
# add clinical test data
colnames(ct)[1] <- "SampleID"
names(ct)
# trim last few cols
ct <- ct[,c(1:52)]
# glimpse(ct)
# there are quite a few NAs / missing vals here
rowSums(is.na(ct))
colSums(is.na(ct))
# merge with abundance and visit data
alldata_clean <- left_join(ab_visit_clean, ct, by = "SampleID")
names(alldata_clean)
names(subjects)
names(alldata_clean)
alldata_clean$SubjectID
# merge with subject level data
alldata_clean <- merge(alldata_clean, subjects, by = "SubjectID")
View(alldata_clean)
# select baseline samples for each individual
# define baseline as minimum collection date
baselines <- alldata_clean %>%
group_by(SubjectID) %>%
mutate(
basetime = min(CollectionDate, na.rm = T)
) %>%
arrange(SubjectID)
baseline_time <- baselines %>% select(SubjectID,basetime) %>% unique()
# base_ab_pheno has complete abundance data and liver lab data for all baseline individuals
base_ab_pheno <- merge(baseline_time, alldata_clean, by.x = c("SubjectID","basetime"), by.y = c("SubjectID","CollectionDate"), all.x = TRUE)
base_ab_pheno <- cbind(base_ab_pheno[,c("SubjectID","basetime","SampleID","A1C", "CHOL", "CHOLHDL", "HDL", "LDL", "LDLHDL")], base_ab_pheno %>% select(starts_with("genus")))
base_ab_pheno <- na.omit(base_ab_pheno)
# get a dataframe with just the abundance variables
base_abund <- (base_ab_pheno %>% select(starts_with("genus")))
rownames(base_abund) <- base_ab_pheno$SampleID
write.table(base_ab_pheno, "../data/baseline_genusAbundance_pheno.txt", quote = F, row.names = F)
write.table(base_abund, "../data/baseline_genusAbundance.txt", quote = F, row.names = T)
write.table(alldata_clean, "../data/allTimePoints_abundance_pheno_visitInfo.txt", quote = F, row.names = F, sep = ',')
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
library(rcorr)
setwd("~/src/microbiome-cs226/scripts/")
# import data
ab = read.table("../data/baseline_genusAbundance.txt")
ab_pheno = read.table("../data/baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
write.table(alldata_clean, "../data/allTimePoints_abundance_pheno_visitInfo.txt", quote = F, row.names = F, sep = ',')
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
alldata_clean <- alldata_clean[!(colnames(alldata_clean) %in% c("Study"))]
# select baseline samples for each individual
# define baseline as minimum collection date
baselines <- alldata_clean %>%
group_by(SubjectID) %>%
mutate(
basetime = min(CollectionDate, na.rm = T)
) %>%
arrange(SubjectID)
baseline_time <- baselines %>% select(SubjectID,basetime) %>% unique()
# base_ab_pheno has complete abundance data and liver lab data for all baseline individuals
base_ab_pheno <- merge(baseline_time, alldata_clean, by.x = c("SubjectID","basetime"), by.y = c("SubjectID","CollectionDate"), all.x = TRUE)
base_ab_pheno <- cbind(base_ab_pheno[,c("SubjectID","basetime","SampleID","A1C", "CHOL", "CHOLHDL", "HDL", "LDL", "LDLHDL")], base_ab_pheno %>% select(starts_with("genus")))
base_ab_pheno <- na.omit(base_ab_pheno)
# get a dataframe with just the abundance variables
base_abund <- (base_ab_pheno %>% select(starts_with("genus")))
rownames(base_abund) <- base_ab_pheno$SampleID
write.table(base_ab_pheno, "../data/baseline_genusAbundance_pheno.txt", quote = F, row.names = F)
write.table(base_abund, "../data/baseline_genusAbundance.txt", quote = F, row.names = T)
write.table(alldata_clean, "../data/allTimePoints_abundance_pheno_visitInfo.txt", quote = F, row.names = F, sep = ',')
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
names(ab_pheno_all)
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),
ab_pheno_all[c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")])
ab_pheno_all = na.omit(ab_pheno_all)
View(ab_visit_clean)
View(ab_pheno_all)
desiredpheno = c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt",
header = T, sep = ',')
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
library(rcorr)
setwd("~/src/microbiome-cs226/scripts/")
# import data
ab = read.table("../data/baseline_genusAbundance.txt")
ab_pheno = read.table("../data/baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt",
header = T, sep = ',')
desiredpheno = c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")
ab_all = select(ab_pheno_all, starts_with("genus"))
pheno_all = ab_pheno_all[desiredpheno]
rownames(ab_all) = ab_pheno_all$SampleID
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
library(rcorr)
setwd("~/src/microbiome-cs226/scripts/")
# import data
ab = read.table("../data/baseline_genusAbundance.txt")
ab_pheno = read.table("../data/baseline_genusAbundance_pheno.txt", header = T)
pheno = ab_pheno[1:9]
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
desiredpheno = c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")
# make sure we have complete data
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),
ab_pheno_all[desiredpheno])
ab_pheno_all = na.omit(ab_pheno_all)
# separate abundance from phenotype
ab_all = select(ab_pheno_all, starts_with("genus"))
pheno_all = ab_pheno_all[desiredpheno]
rownames(ab_all) = ab_pheno_all$SampleID
View(pheno_all)
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
library(rcorr)
setwd("~/src/microbiome-cs226/scripts/")
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
desiredpheno = c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")
# make sure we have complete data
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),
ab_pheno_all[desiredpheno])
ab_pheno_all = na.omit(ab_pheno_all)
# separate abundance from phenotype
ab_all = select(ab_pheno_all, starts_with("genus"))
pheno_all = ab_pheno_all[desiredpheno]
rownames(ab_all) = ab_pheno_all$SampleID
# function to calculate bray-curtis dissimilarity between two samples (assumes they are counted as proportions)
braycurtis <- function(si, sj) {
# sum lesser proportions of each genus
top = sum(abs(si - sj))
bottom = sum(si + sj)
return(top/bottom)
}
# function to coerce the right rows into bray-curtis and take median result
braycurtis_wrap <- function(abund, sample, healthy, pheno) {
samesubject = pheno[pheno$SampleID == sample, "SubjectID"]
res = sapply(healthy[!(healthy %in% samesubject)], function(h)
braycurtis(abund[h,], abund[sample,]))
return(median(res))
}
# function to get dysbiosis scores given an abundance table and response variable
# target must be oriented so lower values are healthier
dysbiosisAnalysis <- function(abund, pheno, target) {
# scale abundances to proportions
abund_scale = t(apply(abund, 1, function(row) row / sum(row)))
# rowSums(abund_scale) # verify this worked
# define "healthy" samples, from people with low cholesterol
healthythresh = 0.1
healthy = rownames(abund)[target < quantile(target, healthythresh)]
unhealthy = setdiff(rownames(abund), healthy)
# calculate median bray-curtis dissimilarity from healthy for each sample
# exclude samples from the same subject
# medianbc = sapply(rownames(abund), function(samp)
#   median(sapply(healthy, function(h) braycurtis(abund[samp,], abund[h,])))
# )
medianbc = sapply(rownames(abund), function(sample)
braycurtis_wrap(abund, sample, healthy, pheno)
)
# find dysbiotic samples
dysthresh = 0.9
dys = pheno[medianbc > quantile(medianbc, dysthresh), "SampleID"]
# merge this info back onto the phenotype data
pheno = cbind(pheno, medianbc)
pheno$healthy = pheno$SampleID %in% healthy
pheno$dysbiotic = pheno$SampleID %in% dys
return(list(medianbc = medianbc, pheno = pheno))
}
install.packages("rcorr")
install.packages("Hmisc")
library(Hmisc)
# test if gut microbe dysbiosis is connected to high cholesterol
library(ggplot2)
library(ggpubr)
library(dplyr)
library(tidyverse)
library(Hmisc)
setwd("~/src/microbiome-cs226/scripts/")
ab_pheno_all = read.table("../data/allTimePoints_abundance_pheno_visitInfo.txt", header = T, sep = ',')
desiredpheno = c("SampleID", "SubjectID", "CollectionDate",
"LDLHDL", "Age", "Sex", "BMI", "Race")
# make sure we have complete data
ab_pheno_all = cbind(select(ab_pheno_all, starts_with("genus")),
ab_pheno_all[desiredpheno])
ab_pheno_all = na.omit(ab_pheno_all)
# separate abundance from phenotype
ab_all = select(ab_pheno_all, starts_with("genus"))
pheno_all = ab_pheno_all[desiredpheno]
rownames(ab_all) = ab_pheno_all$SampleID
# function to calculate bray-curtis dissimilarity between two samples (assumes they are counted as proportions)
braycurtis <- function(si, sj) {
# sum lesser proportions of each genus
top = sum(abs(si - sj))
bottom = sum(si + sj)
return(top/bottom)
}
# function to coerce the right rows into bray-curtis and take median result
braycurtis_wrap <- function(abund, sample, healthy, pheno) {
samesubject = pheno[pheno$SampleID == sample, "SubjectID"]
res = sapply(healthy[!(healthy %in% samesubject)], function(h)
braycurtis(abund[h,], abund[sample,]))
return(median(res))
}
# function to get dysbiosis scores given an abundance table and response variable
# target must be oriented so lower values are healthier
dysbiosisAnalysis <- function(abund, pheno, target) {
# scale abundances to proportions
abund_scale = t(apply(abund, 1, function(row) row / sum(row)))
# rowSums(abund_scale) # verify this worked
# define "healthy" samples, from people with low cholesterol
healthythresh = 0.1
healthy = rownames(abund)[target < quantile(target, healthythresh)]
unhealthy = setdiff(rownames(abund), healthy)
# calculate median bray-curtis dissimilarity from healthy for each sample
# exclude samples from the same subject
# medianbc = sapply(rownames(abund), function(samp)
#   median(sapply(healthy, function(h) braycurtis(abund[samp,], abund[h,])))
# )
medianbc = sapply(rownames(abund), function(sample)
braycurtis_wrap(abund, sample, healthy, pheno)
)
# find dysbiotic samples
dysthresh = 0.9
dys = pheno[medianbc > quantile(medianbc, dysthresh), "SampleID"]
# merge this info back onto the phenotype data
pheno = cbind(pheno, medianbc)
pheno$healthy = pheno$SampleID %in% healthy
pheno$dysbiotic = pheno$SampleID %in% dys
return(list(medianbc = medianbc, pheno = pheno))
}
dysbio_all = dysbiosisAnalysis(ab_all, pheno_all, pheno_all$LDLHDL)
medianbc = dysbio_all$medianbc
pheno = dysbio_all$pheno
# compute PCs to correct for in regression
pca_all = prcomp(ab_all, center = T, scale. = T)
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno_all[c("LDLHDL", "medianbc", "Age", "Sex", "BMI", "Race")])
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI", "Race")])
head(corfeatures)
cor = rcorr(as.matrix(corfeatures), type = "pearson")
which(is.na(corfeatures))
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
cor = rcorr(as.matrix(corfeatures), type = "pearson")
head(pheno)
summary(pheno)
corfeatures$Sex = as.numeric(corfeatures$Sex)
corfeatures$Sex
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
corfeatures$Sex = as.factor(corfeatures$Sex)
corfeatures$Sex
cor = rcorr(as.matrix(corfeatures), type = "pearson")
class(corfeatures)
lapply(corfeatures, class)
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
corfeatures$Sex = as.numeric(as.factor(corfeatures$Sex))
head(corfeatures)
cor = rcorr(as.matrix(corfeatures), type = "pearson")
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
order = "FPC", pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
library(corrplot)
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
order = "FPC", pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
dim(corfeatures)
# compute PCs to correct for in regression
pca_all = prcomp(ab_all, center = T, scale. = T)
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
tail(corfeatures)
corfeatures$Sex = as.numeric(as.factor(corfeatures$Sex))
cor = rcorr(as.matrix(corfeatures), type = "pearson")
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
corfeatures$Sex = as.numeric(as.factor(corfeatures$Sex))
cor = rcorr(as.matrix(corfeatures), type = "pearson")
# fix missing diagonal
for (i in nrow(cor$P)) {
for (j in nrow(cor$P)) {
cor$P[i, j] <- 0
}
}
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
View(cor$r)
View(cor$P)
# fix missing diagonal
for (i in 1:nrow(cor$P)) {
for (j in 1:nrow(cor$P)) {
cor$P[i, j] <- 0
}
}
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
corfeatures$Sex = as.numeric(as.factor(corfeatures$Sex))
cor = rcorr(as.matrix(corfeatures), type = "pearson")
# fix missing diagonal
for (i in 1:nrow(cor$P)) {
for (j in 1:nrow(cor$P)) {
cor$P[i, i] <- 0
}
}
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
# find correlations with PCs and other important factors
corfeatures = cbind(pca_all$x[,1:10],
pheno[c("LDLHDL", "medianbc", "Age", "Sex", "BMI")])
corfeatures$Sex = as.numeric(as.factor(corfeatures$Sex))
cor = rcorr(as.matrix(corfeatures), type = "pearson")
# fix missing diagonal
for (i in 1:nrow(cor$P)) {
cor$P[i, i] <- 0
}
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
# fit linear model predicting LDLHDL from dysbiosis score
summary(lm(LDLHDL ~ medianbc, data = pheno))
# fit linear model predicting LDLHDL from dysbiosis score
summary(lm(LDLHDL ~ medianbc + PC1 + PC2 + PC3 + Age + Sex, data = corfeatures))
ggplot(corfeatures, aes(x = PC6, y = medianbc)) + geom_point()
ggplot(corfeatures, aes(x = PC6, y = medianbc)) + geom_point() + geom_smooth("lm")
ggplot(corfeatures, aes(x = PC6, y = medianbc)) + geom_point() + geom_smooth(method = "lm")
ggplot(corfeatures, aes(x = PC6, y = medianbc)) + geom_point() + geom_smooth(method = "lm", se = F)
corrplot(cor$r, type = "upper", p.mat = cor$P, sig.level = 0.05/nrow(cor$r),
pch.cex = 1, pch.col = "gray",
tl.cex = 0.75, tl.col = "black",
method = "color")
